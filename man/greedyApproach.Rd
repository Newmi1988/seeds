% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/greedyApproach.R
\name{greedyApproach}
\alias{greedyApproach}
\title{Greedy method for estimating a sparse solution}
\usage{
greedyApproach(alphaStep, Beta, alpha1, alpha2, x0, optW, times, measFunc,
  measData, sd, epsilon, parameters, systemInput, modelFunc, greedyLogical,
  plotEstimates, conjGrad, cString, logTransfVar)
}
\arguments{
\item{alphaStep}{the starting stepsize for the gradient descent
a fitting stepsize will be calculated based on a backtracking line search
if the algorithm converges to slow use a bigger stepsize}

\item{Beta}{skaling parameter for the backtracking to approximate the stepsize of the gradient descent. Is set to  0.8
if no value is given to the function}

\item{alpha1}{L1-norm parameter of the dynamic elastic net approach, is set to zero for this algorithm}

\item{alpha2}{L2-norm parameter of the dynamic elastic net approach
used for regulation purposes
set to NULL for a approximation of alpha2 - will results in a longer runtime}

\item{x0}{inital state of the ODE system}

\item{optW}{a vector that indicates for which knots of the network a input should be calculated}

\item{measFunc}{a R-Function that is used for measurement of the states if the system is not completly
measurable; an empty argument will result in the assumption that the complete system is
measurable}

\item{measData}{a table that containts the measurements of the experiment; used to calculate the needed inputs}

\item{sd}{standard deviation of the measurement; used to weight the errors of the estimates in the cost function}

\item{epsilon}{parameter that defines the stopping criteria for the algorithm, in this case percent change in cost function J[w]}

\item{parameters}{vector or named vector that contains the parameters of the ODE equation}

\item{systemInput}{an dataset that discribes the external input of the system}

\item{modelFunc}{a R-Function that states the ODE system for which the hidden inputs should be calculated}

\item{greedyLogical}{a boolean that states if the greedy approach should be used;if set to FALSE the algorithm
will only use perform a calculation of the inputs for all knots without a sparse solution}

\item{plotEstimates}{boolean that indicated if the current estimate should be shown}

\item{conjGrad}{boolean that indicates the usage of conjugate gradient method over the normal steepest descent}

\item{cString}{a string that represents constrains, can be used to calculate a hidden input for a komponent that gradient is zero}

\item{logTransfVar}{a vector indicating which state variables should be log transformed to force positive solutions for the states}
}
\value{
returns a results-object with default plot function. The plot shows the estimated best sparse fit
}
\description{
calculates controls based on a first optimisation with gradient descent; should result in a sparse vector
of hidden inputs.
}
\examples{
# usb network example
uvbParameter = c(  ks1=0.23,
                 ks2=4.0526,
                 kdr1=0.1,
                 kdr2=0.2118,
                 k1=0.0043,
                 k2=161.62,
                 ka1=0.0372,
                 ka2=0.0611,
                 ka3=4.7207,
                 kd1=94.3524,
                 kd2=50.6973,
                 kd3=0.5508,
                 ks3=0.4397,
                 kdr3=1.246,
                 uv=1,
                 ka4=10.1285,
                 kd4=1.1999,
                 n1=3,
                 n2=2,
                 n3=3.5,
                 kdr3a=0.9735,
                 kdr3b=0.406,
                 ksr=0.7537,
                 fhy3_s=5)

x0 = c(0.2,10,2,0,0,20,0,0,0,4.2,0.25,20,0)

uvbModel <- function(t,x,parameters) {
  with (as.list(parameters),{

  dx1 = ((-2) * ((ka1 * (x[1]^2) * (x[4]^2)) - (kd1 * x[5])) + (-2) * ((ka2 * (x[1]^2) * x[2]) - (kd2 * x[3])) + ((ks1 *((1) + (uv * n3 * (x[11] + fhy3_s))))  - (kdr1 * ((1) + (n1 * uv)) * x[1])))
  dx2 = ((-1) * ((ka2*(x[1]^2) * x[2]) - (kd2 * x[3])) +(-1) * ((ka4 * x[2] * x[12]) - (kd4 * x[13])))
  dx3 = (((ka2 * (x[1]^2) * x[2]) - (kd2*  x[3]))) 
  dx4 = ((-2) * (k1*(x[4]^2)) + (2) * (k2 * x[6]) + (-2) * ((ka1 * (x[1]^2)* (x[4]^2)) - (kd1 * x[5])) + (-1)* (ka3 * x[4] *x[7]))
  dx5 =  (((ka1 * (x[1]^2) * (x[4]^2)) -(kd1 * x[5])))
  dx6 = ((-1) * (k2 * x[6]) +  (k1 * (x[4]^2)) +(kd3 * (x[8]^2)))
  dx7 = ((-1) * (ka3 * x[4] * x[7]) + ((ks2 * ((1) + (uv * x[5]))) -(kdr2 * x[7])) + (2) * (kd3 * (x[8]^2)))
  dx8 = ((-2) * (kd3 * x[8]^2) + (ka3 * x[4] * x[7])) 
  dx9  = 0 
  dx10 = 0
  dx11 =  (((ks3 * ((1) + (n2 * uv))) -(kdr3 * (((x[3] / (kdr3a + x[3])) + (x[13] / (kdr3b + x[13]))) -(x[5] / (ksr + x[5]))) *  x[11])))
  dx12 = ((-1) * (ka4 * x[2] * x[12]) + (kd4 * x[13]))
  dx13 =((ka4 * x[2] * x[12]) - (kd4 * x[13]))
  
  list(c(dx1,dx2,dx3,dx4,dx5,dx6,dx7,dx8,dx9,dx10,dx11,dx12,dx13))
  })
}


uvbMeasure <- function(x) {
  
  y1 = 2*x[,5] + x[,4] + x[,8]
  y2 = 2*x[,5] + 2* x[,3] + x[,1]
  y3 = x[,6]
  y4 = x[,11]
  y5 = x[,4]
  
  return(list(y1,y2,y3,y4,y5))
}


y <- uvbData[,1:6]
t <- uvbData$t
sd <- uvbData[,7:11]
system.time(
res <- greedyApproach(alphaStep = 500, alpha2 = 0.0001, optW = rep(1,13), x0 = x0, sd = sd,
               measFunc = uvbMeasure, measData = y, epsilon = 0.1, Beta = 0.8,
               parameters = uvbParameter, modelFunc = uvbModel, plotEstimates = TRUE, conjGrad = TRUE)
)

plot(res)

# plot the solution for the first selected variable
# plot(res[[1]])
}
